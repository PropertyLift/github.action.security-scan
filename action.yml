name: Security scan
description: Common Github Action for source code security scanning

inputs:
  token:
    description: GitHub Token
    required: true
    default: ''
  severity:
    description: List of severities
    required: false
    default: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
  resultFile:
    description: File which will contain security scan result
    required: false
    default: trivy-scan-results.output
  templateFile:
    description: Trivy template file name
    required: false
    default: trivy_markdown.tpl

runs:
  using: composite
  steps:
    - name: Create Trivy template
      shell: bash -e {0}
      run: |
            cat <<EOF > ${{ inputs.templateFile }}
            {{- if . }}
            {{- range . }}
            {{- if (gt (len .Vulnerabilities) 0) }}
            <h3>Target <code>{{ escapeXML .Target }}</code></h3>
            {{- end }}
            {{- if (gt (len .Vulnerabilities) 0) }}
            <h4>Vulnerabilities ({{ len .Vulnerabilities }})</h4>
                <table>
                    <tr>
                        <th>Package</th>
                        <th>ID</th>
                        <th>Severity</th>
                        <th>Installed Version</th>
                        <th>Fixed Version</th>
                    </tr>
                    {{- range .Vulnerabilities }}
                        <tr>
                            <td><code>{{ escapeXML .PkgName }}</code></td>
                            <td>{{ escapeXML .VulnerabilityID }}</td>
                            <td>{{ escapeXML .Severity }}</td>
                            <td>{{ escapeXML .InstalledVersion }}</td>
                            <td>{{ escapeXML .FixedVersion }}</td>
                        </tr>
                    {{- end }}
                </table>
            {{- end }}
            {{- if (gt (len .Misconfigurations ) 0) }}
            <h4>Misconfigurations</h4>
            <table>
                <tr>
                    <th>Type</th>
                    <th>ID</th>
                    <th>Check</th>
                    <th>Severity</th>
                    <th>Message</th>
                </tr>
                {{- range .Misconfigurations }}
                    <tr>
                        <td>{{ escapeXML .Type }}</td>
                        <td>{{ escapeXML .ID }}</td>
                        <td>{{ escapeXML .Title }}</td>
                        <td>{{ escapeXML .Severity }}</td>
                        <td>
                          {{ escapeXML .Message }}
                          <br><a href={{ escapeXML .PrimaryURL | printf "%q" }}>{{ escapeXML .PrimaryURL }}</a></br>
                        </td>
                    </tr>
                {{- end }}
            </table>
            {{- end }}
            {{- end }}
            {{- end }}
            EOF

    - name: Run Trivy vulnerability scanner in repo mode
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        ignore-unfixed: false
        format: template
        template: "@${{ inputs.templateFile }}"
        output: ${{ inputs.resultFile }}
        severity: ${{ inputs.severity }}
        exit-code: 0

    - name: Get Trivy scan results
      id: trivy-get-results
      shell: bash -e {0}
      run: |
          [ -s ${{ inputs.resultFile }} ] || echo 'trivy-result=empty' >> $GITHUB_OUTPUT

    - name: Store Trivy scan results in env
      if: steps.trivy-get-results.outputs.trivy-result != 'empty'
      shell: bash -e {0}
      run: |
          echo 'TRIVY_FS_RESULTS<<EOF' >> $GITHUB_ENV
          cat ${{ inputs.resultFile }} >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

    - name: Publish Trivy scan results in PR
      uses: thollander/actions-comment-pull-request@v2
      if: steps.trivy-get-results.outputs.trivy-result != 'empty' && github.event_name == 'pull_request'
      with:
        message: |
          ## Trivy results:
          ### Source code scaning results
          ${{ env.TRIVY_FS_RESULTS }}
        GITHUB_TOKEN: ${{ inputs.token }}
